// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  email       String   @unique
  username    String   @unique
  displayName String?
  avatar      String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Channel info
  channelName        String?
  channelDescription String?
  channelBanner      String?
  subscribersCount   Int     @default(0)

  // Relations
  videos       Video[]
  comments     Comment[]
  likes        Like[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("ChannelSubscribers")
  playlists    Playlist[]
  watchHistory WatchHistory[]

  @@map("users")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  thumbnailUrl   String?
  videoUrl    String
  duration    Int? // in seconds
  views       Int      @default(0)
  likes       Int      @default(0)
  dislikes    Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  comments     Comment[]
  videoLikes   Like[]
  tags         VideoTag[]
  playlists    PlaylistVideo[]
  watchHistory WatchHistory[]

  @@map("videos")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId  String
  videoId String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Self-referencing for replies
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id     String    @id @default(cuid())
  type   LikeType // LIKE or DISLIKE
  userId String
  videoId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("likes")
}

model Subscription {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Foreign keys
  subscriberId String // User who is subscribing
  channelId    String // Channel being subscribed to

  subscriber User @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  channel    User @relation("ChannelSubscribers", fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, channelId])
  @@map("subscriptions")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#3B82F6")

  videos VideoTag[]

  @@map("tags")
}

model VideoTag {
  videoId String
  tagId   String

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([videoId, tagId])
  @@map("video_tags")
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(true)
  thumbnailUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  videos PlaylistVideo[]

  @@map("playlists")
}

model PlaylistVideo {
  id       String @id @default(cuid())
  position Int

  playlistId String
  videoId    String

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@map("playlist_videos")
}

model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  progress  Int      @default(0) // seconds watched

  userId  String
  videoId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("watch_history")
}

enum LikeType {
  LIKE
  DISLIKE
}